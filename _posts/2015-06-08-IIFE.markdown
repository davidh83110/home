---
title: The IIFE pattern
date: 2015-06-08
description: Immediately-Invoked Function Expression
---

## **IIFE**, which stands for Immediately Invoked Function Expression, is a common JavaScript design pattern aimed to protect a module's scope from the environment in which it is placed.

* * *

There are two ways of writing such pattern, each perfectly valid, so just pick your favorite.

{% highlight javascript %}
(function(){ /* code */ }()); // Crockford's way
(function(){ /* code */ })(); // But this is also fine
{% endhighlight %}

> Crockford doesn't like parens on the IIFE's outside â€” because they ["look like dog balls"](https://twitter.com/paul_irish/status/176187448420864000)

Function expressions can be named or anonymous, and so do IIFEs

{% highlight javascript %}
(function IIFE(){ /* code */ })(); // Named IIFE
(function(){ /* code */ })(); // Anonymous IIFE
{% endhighlight %}

Named function expressions are generally more preferable especially for [debugging](https://developer.chrome.com/devtools/docs/javascript-debugging#call-stack-panel), and no, it won't pollute your global scope.

* * *

### Why the parentheses wrap

An immediately invoked function expression need to be wrapped inside parens to avoid the parser to throw an error by thinking it encountered an anonymous function declaration instead.

{% highlight javascript %}
// Function expression VS Function declaration
var fn = function(){}; // Expression
function fn(){}; // Declaration
{% endhighlight %}
### Benefits

The main benefit of the IIFE pattern is local scoping and that's why it is used by most popular libraries (jQuery, Backbone.js, etc).

Another small benefit relies on the ability to pass common global objects (like window, document, jQuery, etc) to an IIFE in order to reference them locally from within the IFEE's local scope. This reduce the number of scope lookups and increase performances.

{% highlight javascript %}
(function IIFE((window, document, $){
  // ...
}(window, document, window.jQuery));
{% endhighlight %}

For more details on the IIFE pattern read [Ben Alman's original post](http://benalman.com/news/2010/11/immediately-invoked-function-expression/).
